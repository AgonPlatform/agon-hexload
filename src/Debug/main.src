; Zilog eZ80 ANSI C Compiler Release 3.4
; -nomodsect -optsize -noreduceopt -nopadbranch -debug
; -peephole -globalopt -localcse -const=ROM 
	FILE	"..\main.c"
	.assume ADL=1
.DEBUG "C"
	SEGMENT CODE
.BEGREC "fmt_type",19
.DEFINE "status"
.VALUE 0
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "flags"
.VALUE 1
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "size"
.VALUE 2
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "chr"
.VALUE 3
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "type"
.VALUE 4
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "field_width"
.VALUE 5
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "precision"
.VALUE 6
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "set_begin"
.VALUE 7
.CLASS 8
.TYPE 34
.ENDEF
.DEFINE "set_end"
.VALUE 10
.CLASS 8
.TYPE 34
.ENDEF
.DEFINE "pad_whole"
.VALUE 13
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "pad_pre_fract"
.VALUE 14
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "pad_post_fract"
.VALUE 15
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "pad_at"
.VALUE 16
.CLASS 8
.TYPE 34
.ENDEF
.ENDREC "fmt_type"
.BEGREC "flt_info",12
.DEFINE "flags"
.VALUE 0
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "exp"
.VALUE 1
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "digits"
.VALUE 2
.CLASS 8
.DIM 10
.TYPE 108
.ENDEF
.ENDREC "flt_info"
.BEGREC "NONAME0",4
.DEFINE "dr"
.VALUE 0
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "ddr"
.VALUE 1
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "alt1"
.VALUE 2
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "alt2"
.VALUE 3
.CLASS 8
.TYPE 12
.ENDEF
.ENDREC "NONAME0"
.BEGREC "NONAME1",6
.DEFINE "baudRate"
.VALUE 0
.CLASS 8
.TYPE 4
.ENDEF
.DEFINE "dataBits"
.VALUE 3
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "stopBits"
.VALUE 4
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "parity"
.VALUE 5
.CLASS 8
.TYPE 12
.ENDEF
.ENDREC "NONAME1"
;    1	/*
;    2	 * Title:			AGON Hexload code
;    3	 * Author:			Jeroen Venema
;    4	 * Created:			22/10/2022
;    5	 * Last Updated:	07/01/2023
;    6	 * 
;    7	 * Modinfo:
;    8	 * 22/10/2022:		Initial version MOS patch
;    9	 * 23/10/2022:		Receive_bytestream in assembly
;   10	 * 26/11/2022:		MOS commandline version
;   11	 * 07/01/2023:		Removed VDP patch bytestream option, shift to UART1 code
;   12	 */
;   13	
;   14	#define MOS_defaultLoadAddress 0x040000		// if no address is given from the transmitted Hex file
;   15	#define MOS102_SETVECTOR	   0x000956		// as assembled in MOS 1.02, until set_vector becomes a API call in a later MOS version
;   16	
;   17	#include <stdio.h>
;   18	#include <ctype.h>
;   19	#include "mos-interface.h"
;   20	#include "uart.h"
;   21	#include <string.h>
;   22	
;   23	typedef void * rom_set_vector(unsigned int vector, void(*handler)(void));
;   24	
;   25	CHAR hxload(void);
;   26	
;   27	int main(int argc, char * argv[]) {
_main:
.DEFINE "_main"

.VALUE _main

.CLASS 2

.TYPE 68

.ENDEF

.BEGFUNC "main",27,"_main"

.LINE 27

.DEFINE "argc"

.CLASS 65

.VALUE 6

.TYPE 4

.ENDEF

.DEFINE "argv"

.CLASS 65

.VALUE 9

.TYPE 290

.ENDEF

.DEFINE "c"

.CLASS 65

.VALUE -1

.TYPE 2

.ENDEF

.DEFINE "oldvector"

.CLASS 65

.VALUE -4

.TYPE 33

.ENDEF

.DEFINE "pUART"

.CLASS 65

.VALUE -10

.TAG "NONAME1"

.TYPE 8

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	PUSH	BC
	PUSH	BC
	PUSH	BC
	DEC	SP
;   28		CHAR c;
;   29		void *oldvector;
;   30		
;   31		rom_set_vector *set_vector = (rom_set_vector *)MOS102_SETVECTOR;	
;   32		UART 	pUART;
;   33	
;   34		pUART.baudRate = 384000;
.LINE 34

	LD	BC,384000
	LD	(IX+%FFFFFFF6),BC
;   35		pUART.dataBits = 8;
.LINE 35

	LD	(IX+%FFFFFFF9),%8
;   36		pUART.stopBits = 1;
.LINE 36

	LD	(IX+%FFFFFFFA),%1
;   37		pUART.parity = PAR_NOPARITY;
.LINE 37

	LD	(IX+%FFFFFFFB),%0
;   38	
;   39		oldvector = set_vector(UART1_IVECT, uart1_handler);
.LINE 39

	LD	BC,_uart1_handler
	PUSH	BC
	LD	BC,26
	PUSH	BC
	LD	IY,2390
	CALL	__indcall
	POP	BC
	POP	BC
	LD	(IX+%FFFFFFFC),HL
;   40		init_UART1();
.LINE 40

	CALL	_init_UART1
;   41		open_UART1(&pUART);								// Open the UART 
.LINE 41

	PEA	IX+%FFFFFFF6
	CALL	_open_UART1
	POP	BC
;   42	
;   43		printf("Receiving Intel hex file\r\n");
.LINE 43

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__0
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;   44		c = hxload();
.LINE 44

	CALL	_hxload
	LD	(IX+%FFFFFFFF),A
;   45		if(c == 0) printf("OK\r\n");
.LINE 45

	OR	A,A
	JR	NZ,L_1
	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__2
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;   46		else printf("%d error(s)\r\n",c);
.LINE 46

	JR	L_2
L_1:
	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	A,(IX+%FFFFFFFF)
	SEXT	HL
	LD	L,(IX+%FFFFFFFF)
	LD	BC,HL
	CALL	__itol
	LD	DE,BC
	LD	C,A
	LD	B,%0
	PUSH	BC
	PUSH	DE
	CALL	__u_itoa
	POP	BC
	POP	BC
	LD	BC,L__3
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
L_2:
;   47	
;   48		// disable UART1 interrupt, set previous vector
;   49		set_vector(UART1_IVECT, oldvector);
.LINE 49

	LD	BC,(IX+%FFFFFFFC)
	PUSH	BC
	LD	BC,26
	PUSH	BC
	LD	IY,2390
	CALL	__indcall
	POP	BC
	POP	BC
;   50		
;   51		return 0;
.LINE 51

	OR	A,A
	SBC	HL,HL
;   52	}
.LINE 52

	LD	SP,IX
	POP	IX
	RET	


;**************************** _main ***************************
;Name                         Addr/Register   Size   Type
;__u_itoa                            IMPORT  -----   function
;_hxload                             IMPORT  -----   function
;___print_sendstring                 IMPORT  -----   function
;___print_xputch                     IMPORT      3   variable
;___print_uputch                     IMPORT  -----   function
;_open_UART1                         IMPORT  -----   function
;_init_UART1                         IMPORT  -----   function
;_uart1_handler                      IMPORT  -----   function
;pUART                                IX-10      6   variable
;oldvector                             IX-4      3   variable
;c                                     IX-1      1   variable
;argv                                  IX+9      3   parameter
;argc                                  IX+6      3   parameter


; Stack Frame Size: 22 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "main",52,"_main"
	SEGMENT STRSECT
L__0:
	DB	"Receiving Intel hex file"
	DB	13,10,0
L__2:
	DB	"OK"
	DB	13,10,0
L__3:
	DB	" error(s)"
	DB	13,10,0
	XREF _hxload:ROM
	XREF _uart1_handler:ROM
	XREF _open_UART1:ROM
	XREF _init_UART1:ROM
	XREF __u_itoa:ROM
	XREF ___print_sendstring:ROM
	XREF ___print_xputch:ROM
	XREF ___print_uputch:ROM
	XREF __indcall:ROM
	XREF __itol:ROM
	XDEF _main
	END
