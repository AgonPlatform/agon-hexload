Zilog eZ80 Macro Assembler Version 4.3 (19073001) RELISTED07-Jan-23     14:22:35     page:   1


PC     Object              I  Line    Source 
                           A     1    ; Zilog eZ80 ANSI C Compiler Release 3.4
                           A     2    ; -nomodsect -optsize -noreduceopt -nopadbranch
                           A     3    ; -peephole -globalopt -localcse -const=ROM 
                           A     4    	FILE	"..\main.c"
                           A     5    	.assume ADL=1
                           A     6    .DEBUG "C"
                           A     7    	SEGMENT CODE
                           A     8    .BEGREC "fmt_type",19
                           A     9    .DEFINE "status"
                           A    10    .VALUE 0
                           A    11    .CLASS 8
                           A    12    .TYPE 12
                           A    13    .ENDEF
                           A    14    .DEFINE "flags"
                           A    15    .VALUE 1
                           A    16    .CLASS 8
                           A    17    .TYPE 12
                           A    18    .ENDEF
                           A    19    .DEFINE "size"
                           A    20    .VALUE 2
                           A    21    .CLASS 8
                           A    22    .TYPE 2
                           A    23    .ENDEF
                           A    24    .DEFINE "chr"
                           A    25    .VALUE 3
                           A    26    .CLASS 8
                           A    27    .TYPE 2
                           A    28    .ENDEF
                           A    29    .DEFINE "type"
                           A    30    .VALUE 4
                           A    31    .CLASS 8
                           A    32    .TYPE 2
                           A    33    .ENDEF
                           A    34    .DEFINE "field_width"
                           A    35    .VALUE 5
                           A    36    .CLASS 8
                           A    37    .TYPE 2
                           A    38    .ENDEF
                           A    39    .DEFINE "precision"
                           A    40    .VALUE 6
                           A    41    .CLASS 8
                           A    42    .TYPE 2
                           A    43    .ENDEF
                           A    44    .DEFINE "set_begin"
                           A    45    .VALUE 7
                           A    46    .CLASS 8
                           A    47    .TYPE 34
                           A    48    .ENDEF
                           A    49    .DEFINE "set_end"
                           A    50    .VALUE 10
                           A    51    .CLASS 8
                           A    52    .TYPE 34
                           A    53    .ENDEF
                           A    54    .DEFINE "pad_whole"
                           A    55    .VALUE 13
                           A    56    .CLASS 8
                           A    57    .TYPE 12
                           A    58    .ENDEF
                           A    59    .DEFINE "pad_pre_fract"
                           A    60    .VALUE 14
                           A    61    .CLASS 8
                           A    62    .TYPE 12
                           A    63    .ENDEF
                           A    64    .DEFINE "pad_post_fract"
                           A    65    .VALUE 15
                           A    66    .CLASS 8
                           A    67    .TYPE 12
                           A    68    .ENDEF
                           A    69    .DEFINE "pad_at"
                           A    70    .VALUE 16
                           A    71    .CLASS 8
                           A    72    .TYPE 34
                           A    73    .ENDEF
                           A    74    .ENDREC "fmt_type"
                           A    75    .BEGREC "flt_info",12
                           A    76    .DEFINE "flags"
                           A    77    .VALUE 0
                           A    78    .CLASS 8
                           A    79    .TYPE 12
                           A    80    .ENDEF
                           A    81    .DEFINE "exp"
                           A    82    .VALUE 1
                           A    83    .CLASS 8
                           A    84    .TYPE 2
                           A    85    .ENDEF
                           A    86    .DEFINE "digits"
                           A    87    .VALUE 2
                           A    88    .CLASS 8
                           A    89    .DIM 10
                           A    90    .TYPE 108
                           A    91    .ENDEF
                           A    92    .ENDREC "flt_info"
                           A    93    .BEGREC "NONAME0",4
                           A    94    .DEFINE "dr"
                           A    95    .VALUE 0
                           A    96    .CLASS 8
                           A    97    .TYPE 12
                           A    98    .ENDEF
                           A    99    .DEFINE "ddr"
                           A   100    .VALUE 1
                           A   101    .CLASS 8
                           A   102    .TYPE 12
                           A   103    .ENDEF
                           A   104    .DEFINE "alt1"
                           A   105    .VALUE 2
                           A   106    .CLASS 8
                           A   107    .TYPE 12
                           A   108    .ENDEF
                           A   109    .DEFINE "alt2"
                           A   110    .VALUE 3
                           A   111    .CLASS 8
                           A   112    .TYPE 12
                           A   113    .ENDEF
                           A   114    .ENDREC "NONAME0"
                           A   115    .BEGREC "NONAME1",6
                           A   116    .DEFINE "baudRate"
                           A   117    .VALUE 0
                           A   118    .CLASS 8
                           A   119    .TYPE 4
                           A   120    .ENDEF
                           A   121    .DEFINE "dataBits"
                           A   122    .VALUE 3
                           A   123    .CLASS 8
                           A   124    .TYPE 12
                           A   125    .ENDEF
                           A   126    .DEFINE "stopBits"
                           A   127    .VALUE 4
                           A   128    .CLASS 8
                           A   129    .TYPE 12
                           A   130    .ENDEF
                           A   131    .DEFINE "parity"
                           A   132    .VALUE 5
                           A   133    .CLASS 8
                           A   134    .TYPE 12
                           A   135    .ENDEF
                           A   136    .ENDREC "NONAME1"
                           A   137    ;    1	/*
                           A   138    ;    2	 * Title:			AGON Hexload code
                           A   139    ;    3	 * Author:			Jeroen Venema
                           A   140    ;    4	 * Created:			22/10/2022
                           A   141    ;    5	 * Last Updated:	07/01/2023
                           A   142    ;    6	 * 
                           A   143    ;    7	 * Modinfo:
                           A   144    ;    8	 * 22/10/2022:		Initial version MOS
                           A   145    ;    9	 * 23/10/2022:		Receive_bytestream 
                           A   146    ;   10	 * 26/11/2022:		MOS commandline ver
                           A   147    ;   11	 * 07/01/2023:		Removed VDP patch b
                           A   148    ;   12	 */
                           A   149    ;   13	
                           A   150    ;   14	#define MOS_defaultLoadAddress 0x040000
                           A   151    ;   15	#define MOS102_SETVECTOR	   0x000956
                           A   152    ;   16	
                           A   153    ;   17	#include <stdio.h>
                           A   154    ;   18	#include <ctype.h>
                           A   155    ;   19	#include "mos-interface.h"
                           A   156    ;   20	#include "uart.h"
                           A   157    ;   21	#include <string.h>
                           A   158    ;   22	
                           A   159    ;   23	typedef void * rom_set_vector(unsigned 
                           A   160    ;   24	
                           A   161    ;   25	CHAR hxload(void);
                           A   162    ;   26	
                           A   163    ;   27	int main(int argc, char * argv[]) {
0400D7                     A   164    _main:
                           A   165    .DEFINE "_main"
                           A   166    
                           A   167    .VALUE _main
                           A   168    
                           A   169    .CLASS 2
                           A   170    
                           A   171    .TYPE 68
                           A   172    
                           A   173    .ENDEF
                           A   174    
                           A   175    .BEGFUNC "main",27,"_main"
                           A   176    
                           A   177    .LINE 27
                           A   178    
                           A   179    .DEFINE "argc"
                           A   180    
                           A   181    .CLASS 65
                           A   182    
                           A   183    .VALUE 6
                           A   184    
                           A   185    .TYPE 4
                           A   186    
                           A   187    .ENDEF
                           A   188    
                           A   189    .DEFINE "argv"
                           A   190    
                           A   191    .CLASS 65
                           A   192    
                           A   193    .VALUE 9
                           A   194    
                           A   195    .TYPE 290
                           A   196    
                           A   197    .ENDEF
                           A   198    
                           A   199    .DEFINE "c"
                           A   200    
                           A   201    .CLASS 65
                           A   202    
                           A   203    .VALUE -1
                           A   204    
                           A   205    .TYPE 2
                           A   206    
                           A   207    .ENDEF
                           A   208    
                           A   209    .DEFINE "oldvector"
                           A   210    
                           A   211    .CLASS 65
                           A   212    
                           A   213    .VALUE -4
                           A   214    
                           A   215    .TYPE 33
                           A   216    
                           A   217    .ENDEF
                           A   218    
                           A   219    .DEFINE "pUART"
                           A   220    
                           A   221    .CLASS 65
                           A   222    
                           A   223    .VALUE -10
                           A   224    
                           A   225    .TAG "NONAME1"
                           A   226    
                           A   227    .TYPE 8
                           A   228    
                           A   229    .ENDEF
                           A   230    
0400D7 DDE5                A   231    	PUSH	IX
0400D9 DD210000 00         A   232    	LD	IX,0
0400DE DD39                A   233    	ADD	IX,SP
0400E0 C5                  A   234    	PUSH	BC
0400E1 C5                  A   235    	PUSH	BC
0400E2 C5                  A   236    	PUSH	BC
0400E3 3B                  A   237    	DEC	SP
                           A   238    ;   28		CHAR c;
                           A   239    ;   29		void *oldvector;
                           A   240    ;   30		
                           A   241    ;   31		rom_set_vector *set_vector = (rom_s
                           A   242    ;   32		UART 	pUART;
                           A   243    ;   33	
                           A   244    ;   34		pUART.baudRate = 384000;
                           A   245    .LINE 34
                           A   246    
0400E4 0100DC05            A   247    	LD	BC,384000
0400E8 DD0FF6              A   248    	LD	(IX+%FFFFFFF6),BC
                           A   249    ;   35		pUART.dataBits = 8;
                           A   250    .LINE 35
                           A   251    
0400EB DD36F908            A   252    	LD	(IX+%FFFFFFF9),%8
                           A   253    ;   36		pUART.stopBits = 1;
                           A   254    .LINE 36
                           A   255    
0400EF DD36FA01            A   256    	LD	(IX+%FFFFFFFA),%1
                           A   257    ;   37		pUART.parity = PAR_NOPARITY;
                           A   258    .LINE 37
                           A   259    
0400F3 DD36FB00            A   260    	LD	(IX+%FFFFFFFB),%0
                           A   261    ;   38	
                           A   262    ;   39		oldvector = set_vector(UART1_IVECT,
                           A   263    .LINE 39
                           A   264    
0400F7 01 6D 02 04         A   265    	LD	BC,_uart1_handler
0400FB C5                  A   266    	PUSH	BC
0400FC 011A0000            A   267    	LD	BC,26
040100 C5                  A   268    	PUSH	BC
040101 FD215609 00         A   269    	LD	IY,2390
040106 CD 4D 0C 04         A   270    	CALL	__indcall
04010A C1                  A   271    	POP	BC
04010B C1                  A   272    	POP	BC
04010C DD2FFC              A   273    	LD	(IX+%FFFFFFFC),HL
                           A   274    ;   40		init_UART1();
                           A   275    .LINE 40
                           A   276    
04010F CD C3 02 04         A   277    	CALL	_init_UART1
                           A   278    ;   41		open_UART1(&pUART);					
                           A   279    .LINE 41
                           A   280    
040113 ED65F6              A   281    	PEA	IX+%FFFFFFF6
040116 CD E1 02 04         A   282    	CALL	_open_UART1
04011A C1                  A   283    	POP	BC
                           A   284    ;   42	
                           A   285    ;   43		printf("Receiving Intel hex file\r\
                           A   286    .LINE 43
                           A   287    
04011B 01 F0 05 04         A   288    	LD	BC,___print_uputch
04011F ED43 B1 0C 04       A   289    	LD	(___print_xputch),BC
040124 01 B4 0C 04         A   290    	LD	BC,L__0
040128 C5                  A   291    	PUSH	BC
040129 CD 70 04 04         A   292    	CALL	___print_sendstring
04012D C1                  A   293    	POP	BC
                           A   294    ;   44		c = hxload();
                           A   295    .LINE 44
                           A   296    
04012E CD C7 03 04         A   297    	CALL	_hxload
040132 DD77FF              A   298    	LD	(IX+%FFFFFFFF),A
                           A   299    ;   45		if(c == 0) printf("OK\r\n");
                           A   300    .LINE 45
                           A   301    
040135 B7                  A   302    	OR	A,A
040136 20 15               A   303    	JR	NZ,L_1
040138 01 F0 05 04         A   304    	LD	BC,___print_uputch
04013C ED43 B1 0C 04       A   305    	LD	(___print_xputch),BC
040141 01 CF 0C 04         A   306    	LD	BC,L__2
040145 C5                  A   307    	PUSH	BC
040146 CD 70 04 04         A   308    	CALL	___print_sendstring
04014A C1                  A   309    	POP	BC
                           A   310    ;   46		else printf("%d error(s)\r\n",c);
                           A   311    .LINE 46
                           A   312    
04014B 18 2F               A   313    	JR	L_2
04014D                     A   314    L_1:
04014D 01 F0 05 04         A   315    	LD	BC,___print_uputch
040151 ED43 B1 0C 04       A   316    	LD	(___print_xputch),BC
040156 DD7EFF              A   317    	LD	A,(IX+%FFFFFFFF)
040159 17ED62              A   318    	SEXT	HL
04015C DD6EFF              A   319    	LD	L,(IX+%FFFFFFFF)
04015F E5C1                A   320    	LD	BC,HL
040161 CD ED 0B 04         A   321    	CALL	__itol
040165 C5D1                A   322    	LD	DE,BC
040167 4F                  A   323    	LD	C,A
040168 0600                A   324    	LD	B,%0
04016A C5                  A   325    	PUSH	BC
04016B D5                  A   326    	PUSH	DE
04016C CD E8 06 04         A   327    	CALL	__u_itoa
040170 C1                  A   328    	POP	BC
040171 C1                  A   329    	POP	BC
040172 01 D4 0C 04         A   330    	LD	BC,L__3
040176 C5                  A   331    	PUSH	BC
040177 CD 70 04 04         A   332    	CALL	___print_sendstring
04017B C1                  A   333    	POP	BC
04017C                     A   334    L_2:
                           A   335    ;   47	
                           A   336    ;   48		// disable UART1 interrupt, set pre
                           A   337    ;   49		set_vector(UART1_IVECT, oldvector);
                           A   338    .LINE 49
                           A   339    
04017C DD07FC              A   340    	LD	BC,(IX+%FFFFFFFC)
04017F C5                  A   341    	PUSH	BC
040180 011A0000            A   342    	LD	BC,26
040184 C5                  A   343    	PUSH	BC
040185 FD215609 00         A   344    	LD	IY,2390
04018A CD 4D 0C 04         A   345    	CALL	__indcall
04018E C1                  A   346    	POP	BC
04018F C1                  A   347    	POP	BC
                           A   348    ;   50		
                           A   349    ;   51		return 0;
                           A   350    .LINE 51
                           A   351    
040190 B7                  A   352    	OR	A,A
040191 ED62                A   353    	SBC	HL,HL
                           A   354    ;   52	}
                           A   355    .LINE 52
                           A   356    
040193 DDF9                A   357    	LD	SP,IX
040195 DDE1                A   358    	POP	IX
040197 C9                  A   359    	RET	
                           A   360    
                           A   361    
                           A   362    ;**************************** _main ***********
                           A   363    ;Name                         Addr/Register   S
                           A   364    ;__u_itoa                            IMPORT  --
                           A   365    ;_hxload                             IMPORT  --
                           A   366    ;___print_sendstring                 IMPORT  --
                           A   367    ;___print_xputch                     IMPORT    
                           A   368    ;___print_uputch                     IMPORT  --
                           A   369    ;_open_UART1                         IMPORT  --
                           A   370    ;_init_UART1                         IMPORT  --
                           A   371    ;_uart1_handler                      IMPORT  --
                           A   372    ;pUART                                IX-10    
                           A   373    ;oldvector                             IX-4    
                           A   374    ;c                                     IX-1    
                           A   375    ;argv                                  IX+9    
                           A   376    ;argc                                  IX+6    
                           A   377    
                           A   378    
                           A   379    ; Stack Frame Size: 22 (bytes)
                           A   380    ;       Spill Code: 0 (instruction)
                           A   381    
                           A   382    
                           A   383    .ENDFUNC "main",52,"_main"
                           A   384    	SEGMENT STRSECT
040CB4                     A   385    L__0:
040CB4 52656365 6976696E   A   386    	DB	"Receiving Intel hex file"
040CBC 6720496E 74656C20 
040CC4 68657820 66696C65 
040CCC 0D0A00              A   387    	DB	13,10,0
040CCF                     A   388    L__2:
040CCF 4F4B                A   389    	DB	"OK"
040CD1 0D0A00              A   390    	DB	13,10,0
040CD4                     A   391    L__3:
040CD4 20657272 6F722873   A   392    	DB	" error(s)"
040CDC 29 
040CDD 0D0A00              A   393    	DB	13,10,0
                           A   394    	XREF _hxload:ROM
                           A   395    	XREF _uart1_handler:ROM
                           A   396    	XREF _open_UART1:ROM
                           A   397    	XREF _init_UART1:ROM
                           A   398    	XREF __u_itoa:ROM
                           A   399    	XREF ___print_sendstring:ROM
                           A   400    	XREF ___print_xputch:ROM
                           A   401    	XREF ___print_uputch:ROM
                           A   402    	XREF __indcall:ROM
                           A   403    	XREF __itol:ROM
                           A   404    	XDEF _main
                           A   405    	END


Errors: 0
Warnings: 0
Lines Assembled: 406
